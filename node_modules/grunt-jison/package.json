{
  "name": "grunt-jison",
  "description": "grunt plugin for jison parser",
  "version": "1.2.1",
  "homepage": "https://github.com/rsilve/grunt-jison",
  "author": {
    "name": "Robert silve",
    "email": "robert@silve.net"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rsilve/grunt-jison.git"
  },
  "bugs": {
    "url": "https://github.com/rsilve/grunt-jison/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rsilve/grunt-jison/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "jison": "~0.4.2",
    "grunt-release": "~0.3.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-jison\n\n> grunt plugin for jison parser\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-jison --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-jison');\n```\n\n## The \"jison\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `jison` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  jison: {\n    target : {\n    \toptions: {\n      \t// Task-specific options go here.\n    \t},\n    \tfiles: {\n      \t// Target-specific file lists and/or options go here.\n    \t}\n     }\n  }\n})\n```\n\n### Options\n\n#### options.moduleType\nType: `String`\nDefault value: `commonjs`\n\nThe type of module you want to generate with Jison.   \nPossible values are `commonjs`, `js` and `amd`.\n\n\n### Usage Examples\n\n#### Default Options\n\n```js\ngrunt.initConfig({\n  jison: {\n    my_parser : {\n    \tfiles: {'generated-parser.js': 'grammar-file.jison}\n    }\n  }\n})\n```\n\n#### Custom Options\nIn this example, we generate a AMD module instead of a standard JS file.\n\n```js\ngrunt.initConfig({\n  jison: {\n  \ttarget : {\n    \toptions: { moduleType: 'amd' },\n    \tfiles: { 'generated-parser.amd.js': 'grammar-file.jison }\n    }\n  }\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-jison@1.2.1",
  "dist": {
    "shasum": "42bdd2c71aa19b1b23dd72d35acc6d3955f87c96"
  },
  "_from": "grunt-jison@latest",
  "_resolved": "https://registry.npmjs.org/grunt-jison/-/grunt-jison-1.2.1.tgz"
}
